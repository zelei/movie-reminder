{"ts":1373308223322,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"{\n  \"name\": \"memory-cache\",\n  \"description\": \"A simple in-memory cache. put() get() and delete()\",\n  \"author\": {\n    \"name\": \"Paul Tarjan\",\n    \"email\": \"npm@paulisageek.com\"\n  },\n  \"url\": \"https://github.com/ptarjan/node-cache\",\n  \"keywords\": [\n    \"cache\",\n    \"ram\",\n    \"simple\",\n    \"storage\"\n  ],\n  \"main\": \"./index.js\",\n  \"version\": \"0.0.5\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/ptarjan/node-cache.git\"\n  },\n  \"readme\": \"# node-cache\\n\\nA simple in-memory cache for node.js\\n\\n## Installation\\n\\n    npm install memory-cache\\n\\n## Usage\\n\\n    var cache = require('memory-cache');\\n\\n    // now just use the cache\\n\\n    cache.put('foo', 'bar');\\n    console.log(cache.get('foo'))\\n\\n    // that wasn't too interesting, here's the good part\\n\\n    cache.put('houdini', 'disapear', 100) // Time in ms\\n    console.log('Houdini will now ' + cache.get('houdini'));\\n\\n    setTimeout(function() {\\n      console.log('Houdini is ' + cache.get('houdini'));\\n    }, 200);\\n\\nwhich should print\\n\\n    bar\\n    Houdini will now disapear\\n    Houdini is null\\n\\n## API\\n\\n### put = function(key, value, time)\\n\\n* Simply stores a value. \\n* If time isn't passed in, it is stored forever.\\n* Will actually remove the value in the specified time (via `setTimeout`)\\n\\n### get = function(key)\\n\\n* Retreives a value for a given key\\n\\n### del = function(key)\\n\\n* Deletes a key\\n\\n### clear = function()\\n\\n* Deletes all keys\\n\\n### size = function()\\n\\n* Returns the current number of entries in the cache\\n\\n### memsize = function()\\n\\n* Returns the number of entries taking up space in the cache\\n* Will usually `== size()` unless a `setTimeout` removal went wrong\\n\\n### debug = function(bool)\\n\\n* Turns on or off debugging\\n\\n### hits = function()\\n\\n* Returns the number of cache hits\\n\\n### misses = function()\\n\\n* Returns the number of cache misses.\\n\\n## TODO\\n\\n* Namespaces\\n* A way of walking the cache for diagnostic purposes\\n\\n## Note on Patches/Pull Requests\\n \\n* Fork the project.\\n* Make your feature addition or bug fix.\\n* Send me a pull request.\\n\",\n  \"_id\": \"memory-cache@0.0.5\",\n  \"dist\": {\n    \"shasum\": \"a0c17ec865bb8896d774176300f4d8a9de9f3ea4\"\n  },\n  \"_from\": \"memory-cache\"\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":2231}]],"length":2231}
{"contributors":[],"silentsave":false,"ts":1373308270297,"patch":[[{"diffs":[[0,"ame\": \"m"],[-1,"emory-cache"],[1,"ovie-reminder"],[0,"\",\n  \"de"]],"start1":6,"start2":6,"length1":27,"length2":29},{"diffs":[[0,"\": \""],[-1,"Paul Tarjan\",\n    \"email\": \"npm@paulisageek.com\"\n  },\n  \"url\": \"https://github.com/ptarjan/node-cache\",\n  \"keywords\": [\n    \"cache\",\n    \"ram\",\n    \"simple\",\n    \"storage\"\n  ],\n  \"main\": \"./index.js\",\n  \"version\": \"0.0.5\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/ptarjan/node-cache.git\"\n  },\n  \"readme\": \"# node-cache\\n\\nA simple in-memory cache for node.js\\n\\n## Installation\\n\\n    npm install memory-cache\\n\\n## Usage\\n\\n    var cache = require('memory-cache');\\n\\n    // now just use the cache\\n\\n    cache.put('foo', 'bar');\\n    console.log(cache.get('foo'))\\n\\n    // that wasn't too interesting, here's the good part\\n\\n    cache.put('houdini', 'disapear', 100) // Time in ms\\n    console.log('Houdini will now ' + cache.get('houdini'));\\n\\n    setTimeout(function() {\\n      console.log('Houdini is ' + cache.get('houdini'));\\n    }, 200);\\n\\nwhich should print\\n\\n    bar\\n    Houdini will now disapear\\n    Houdini is null\\n\\n## API\\n\\n### put = function(key, value, time)\\n\\n* Simply stores a value. \\n* If time isn't passed in, it is stored forever.\\n* Will actually remove the value in the specified time (via `setTimeout`)\\n\\n### get = function(key)\\n\\n* Retreives a value for a given key\\n\\n### del = function(key)\\n\\n* Deletes a key\\n\\n### clear = function()\\n\\n* Deletes all keys\\n\\n### size = function()\\n\\n* Returns the current number of entries in the cache\\n\\n### memsize = function()\\n\\n* Returns the number of entries taking up space in the cache\\n* Will usually `== size()` unless a `setTimeout` removal went wrong\\n\\n### debug = function(bool)\\n\\n* Turns on or off debugging\\n\\n### hits = function()\\n\\n* Returns the number of cache hits\\n\\n### misses = function()\\n\\n* Returns the number of cache misses.\\n\\n## TODO\\n\\n* Namespaces\\n* A way of walking the cache for diagnostic purposes\\n\\n## Note on Patches/Pull Requests\\n \\n* Fork the project.\\n* Make your feature addition or bug fix.\\n* Send me a pull request.\\n\",\n  \"_id\": \"memory-cache@0.0.5\",\n  \"dist\": {\n    \"shasum\": \"a0c17ec865bb8896d774176300f4d8a9de9f3ea4\"\n  },\n  \"_from\": \"memory-cache"],[1,"SÃ¡ndor Zelei\",\n    \"email\": \"sandor.zelei@gmail.com\"\n  },\n  \"main\": \"./index.js"],[0,"\"\n}\n"]],"start1":124,"start2":124,"length1":2109,"length2":87}]],"length":211,"saved":false}
{"ts":1373308277825,"patch":[[{"diffs":[[0,"\": \""],[-1,"A simple in-memory cache. put() get() and delete()"],[0,"\",\n "]],"start1":44,"start2":44,"length1":58,"length2":8}]],"length":161,"saved":false}
{"ts":1373308291444,"patch":[[{"diffs":[[0," \"./"],[-1,"index"],[1,"server/server-e"],[0,".js\""]],"start1":145,"start2":145,"length1":13,"length2":23}]],"length":171,"saved":false}
{"ts":1373308319418,"patch":[[{"diffs":[[0,"m\"\n  },\n"],[1,"  \"dependencies\": {\n    \"express\": \"3.x\",\n    \"mongodb\": \"*\",\n    \"mongoose\": \"*\"\n  },\n"],[0,"  \"main\""]],"start1":128,"start2":128,"length1":16,"length2":103}]],"length":258,"saved":false}
{"ts":1373308353917,"patch":[[{"diffs":[[0,"   \""],[-1,"mongodb"],[1,"ect\": \"*\",\n    \"rekuire"],[0,"\": \""]],"start1":179,"start2":179,"length1":15,"length2":31},{"diffs":[[0,"  \"m"],[-1,"ongoos"],[1,"emory-cach"],[0,"e\": "]],"start1":216,"start2":216,"length1":14,"length2":18}]],"length":278,"saved":false}
